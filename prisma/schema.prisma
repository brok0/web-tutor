datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tutor         Tutor? //make it one to many
  lessons       Lesson[]
  conversation  Conversation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id       Int       @id @default(autoincrement())
  name     String
  messages Message[]

  studentId String
  student   User   @relation(fields: [studentId], references: [id])

  tutorId Int
  tutor   Tutor @relation(fields: [tutorId], references: [id])
}

model Message {
  id      Int     @id @default(autoincrement())
  text    String
  content String?

  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Lesson {
  id    Int      @id @default(autoincrement())
  date  DateTime
  price Decimal

  studentId String
  student   User   @relation(fields: [studentId], references: [id])

  tutorId Int
  tutor   Tutor @relation(fields: [tutorId], references: [id])
}

model Tutor {
  id Int @id @default(autoincrement())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  description    String
  specialization String
  rating         Int
  avatar         String?

  lessons      Lesson[]
  conversation Conversation[]
}
